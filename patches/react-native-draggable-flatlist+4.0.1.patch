diff --git a/node_modules/react-native-draggable-flatlist/src/components/CellRendererComponent.tsx b/node_modules/react-native-draggable-flatlist/src/components/CellRendererComponent.tsx
index d7b833b..241ff41 100644
--- a/node_modules/react-native-draggable-flatlist/src/components/CellRendererComponent.tsx
+++ b/node_modules/react-native-draggable-flatlist/src/components/CellRendererComponent.tsx
@@ -4,7 +4,6 @@ import {
   LayoutChangeEvent,
   MeasureLayoutOnSuccessCallback,
   StyleProp,
-  StyleSheet,
   ViewStyle,
 } from "react-native";
 import Animated, {
@@ -64,7 +63,7 @@ function CellRendererComponent<T>(props: Props<T>) {
     if (translate.value && !isWeb) {
       heldTanslate.value = translate.value;
     }
-    const t = activeKey ? translate.value : heldTanslate.value;
+    const t = isWeb ? translate.value : heldTanslate.value;
     return {
       transform: [horizontalAnim.value ? { translateX: t } : { translateY: t }],
     };
@@ -100,12 +99,12 @@ function CellRendererComponent<T>(props: Props<T>) {
   });
 
   const onCellLayout = useStableCallback((e?: LayoutChangeEvent) => {
-    heldTanslate.value = 0;
     updateCellMeasurements();
     if (onLayout && e) onLayout(e);
   });
 
   useEffect(() => {
+    heldTanslate.value = 0;
     if (isWeb) {
       // onLayout isn't called on web when the cell index changes, so we manually re-measure
       requestAnimationFrame(() => {
@@ -166,7 +165,7 @@ function CellRendererComponent<T>(props: Props<T>) {
       style={[
         props.style,
         baseStyle,
-        activeKey ? animStyle : styles.zeroTranslate,
+        animStyle,
       ]}
       pointerEvents={activeKey ? "none" : "auto"}
     >
@@ -177,12 +176,6 @@ function CellRendererComponent<T>(props: Props<T>) {
 
 export default typedMemo(CellRendererComponent);
 
-const styles = StyleSheet.create({
-  zeroTranslate: {
-    transform: [{ translateX: 0 }, { translateY: 0 }],
-  },
-});
-
 declare global {
   namespace NodeJS {
     interface Global {
diff --git a/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx b/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx
index d7d98c2..ca7245c 100644
--- a/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx
+++ b/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx
@@ -37,9 +37,9 @@ import { typedMemo } from "../utils";
 
 type RNGHFlatListProps<T> = Animated.AnimateProps<
   FlatListProps<T> & {
-    ref: React.Ref<FlatList<T>>;
-    simultaneousHandlers?: React.Ref<any> | React.Ref<any>[];
-  }
+  ref: React.Ref<FlatList<T>>;
+  simultaneousHandlers?: React.Ref<any> | React.Ref<any>[];
+}
 >;
 
 type OnViewableItemsChangedCallback<T> = Exclude<
@@ -155,8 +155,8 @@ function DraggableFlatListInner<T>(props: DraggableFlatListProps<T>) {
   });
 
   const onContainerLayout = ({
-    nativeEvent: { layout },
-  }: LayoutChangeEvent) => {
+                               nativeEvent: { layout },
+                             }: LayoutChangeEvent) => {
     const { width, height } = layout;
     containerSize.value = props.horizontal ? width : height;
     props.onContainerLayout?.({ layout, containerRef });
@@ -295,7 +295,7 @@ function DraggableFlatListInner<T>(props: DraggableFlatListProps<T>) {
       const springTo = placeholderOffset.value - activeCellOffset.value;
       touchTranslate.value = withSpring(
         springTo,
-        animationConfigRef.current,
+        animationConfigRef.value,
         () => {
           runOnJS(onDragEnd)({
             from: activeIndexAnim.value,
diff --git a/node_modules/react-native-draggable-flatlist/src/context/refContext.tsx b/node_modules/react-native-draggable-flatlist/src/context/refContext.tsx
index ea21575..c43bc13 100644
--- a/node_modules/react-native-draggable-flatlist/src/context/refContext.tsx
+++ b/node_modules/react-native-draggable-flatlist/src/context/refContext.tsx
@@ -1,14 +1,14 @@
-import React, { useContext } from "react";
+import React, { useContext, useEffect } from "react";
 import { useMemo, useRef } from "react";
 import { FlatList } from "react-native-gesture-handler";
-import Animated, { WithSpringConfig } from "react-native-reanimated";
+import Animated, { type SharedValue, useSharedValue, WithSpringConfig } from "react-native-reanimated";
 import { DEFAULT_PROPS } from "../constants";
 import { useProps } from "./propsContext";
 import { CellData, DraggableFlatListProps } from "../types";
 
 type RefContextValue<T> = {
   propsRef: React.MutableRefObject<DraggableFlatListProps<T>>;
-  animationConfigRef: React.MutableRefObject<WithSpringConfig>;
+  animationConfigRef: SharedValue<WithSpringConfig>;
   cellDataRef: React.MutableRefObject<Map<string, CellData>>;
   keyToIndexRef: React.MutableRefObject<Map<string, number>>;
   containerRef: React.RefObject<Animated.View>;
@@ -20,9 +20,9 @@ const RefContext = React.createContext<RefContextValue<any> | undefined>(
 );
 
 export default function RefProvider<T>({
-  children,
-  flatListRef,
-}: {
+                                         children,
+                                         flatListRef,
+                                       }: {
   children: React.ReactNode;
   flatListRef?: React.ForwardedRef<FlatList<T>> | null;
 }) {
@@ -41,8 +41,8 @@ export function useRefs<T>() {
 }
 
 function useSetupRefs<T>({
-  flatListRef: flatListRefProp,
-}: {
+                           flatListRef: flatListRefProp,
+                         }: {
   flatListRef?: React.ForwardedRef<FlatList<T>> | null;
 }) {
   const props = useProps<T>();
@@ -50,12 +50,18 @@ function useSetupRefs<T>({
 
   const propsRef = useRef(props);
   propsRef.current = props;
-  const animConfig = {
-    ...DEFAULT_PROPS.animationConfig,
-    ...animationConfig,
-  } as WithSpringConfig;
-  const animationConfigRef = useRef(animConfig);
-  animationConfigRef.current = animConfig;
+  const animConfig = useMemo(
+    () => ({
+      ...DEFAULT_PROPS.animationConfig,
+      ...animationConfig,
+    } as WithSpringConfig),
+    [animationConfig]
+  );
+  const animationConfigRef = useSharedValue(animConfig);
+
+  useEffect(() => {
+    animationConfigRef.value = animConfig;
+  }, [animConfig]);
 
   const cellDataRef = useRef(new Map<string, CellData>());
   const keyToIndexRef = useRef(new Map<string, number>());
diff --git a/node_modules/react-native-draggable-flatlist/src/hooks/useCellTranslate.tsx b/node_modules/react-native-draggable-flatlist/src/hooks/useCellTranslate.tsx
index ce4ab68..efea240 100644
--- a/node_modules/react-native-draggable-flatlist/src/hooks/useCellTranslate.tsx
+++ b/node_modules/react-native-draggable-flatlist/src/hooks/useCellTranslate.tsx
@@ -101,7 +101,7 @@ export function useCellTranslate({ cellIndex, cellSize, cellOffset }: Params) {
       ? activeCellSize.value * (isAfterActive ? -1 : 1)
       : 0;
 
-    return withSpring(translationAmt, animationConfigRef.current);
+    return withSpring(translationAmt, animationConfigRef.value);
   }, [activeKey, cellIndex]);
 
   return translate;
diff --git a/node_modules/react-native-draggable-flatlist/src/hooks/useOnCellActiveAnimation.ts b/node_modules/react-native-draggable-flatlist/src/hooks/useOnCellActiveAnimation.ts
index 7c20587..e4cb304 100644
--- a/node_modules/react-native-draggable-flatlist/src/hooks/useOnCellActiveAnimation.ts
+++ b/node_modules/react-native-draggable-flatlist/src/hooks/useOnCellActiveAnimation.ts
@@ -1,6 +1,7 @@
-import { useRef } from "react";
+import { useEffect } from "react";
 import Animated, {
   useDerivedValue,
+  useSharedValue,
   withSpring,
   WithSpringConfig,
 } from "react-native-reanimated";
@@ -15,8 +16,11 @@ type Params = {
 export function useOnCellActiveAnimation(
   { animationConfig }: Params = { animationConfig: {} }
 ) {
-  const animationConfigRef = useRef(animationConfig);
-  animationConfigRef.current = animationConfig;
+  const animationConfigRef = useSharedValue(animationConfig);
+
+  useEffect(() => {
+    animationConfigRef.value = animationConfig;
+  }, [animationConfig]);
 
   const isActive = useIsActive();
 
@@ -26,8 +30,8 @@ export function useOnCellActiveAnimation(
     const toVal = isActive && isTouchActiveNative.value ? 1 : 0;
     return withSpring(toVal, {
       ...DEFAULT_ANIMATION_CONFIG,
-      ...animationConfigRef.current,
-    });
+      ...animationConfigRef.value,
+    } as WithSpringConfig);
   }, [isActive]);
 
   return {
